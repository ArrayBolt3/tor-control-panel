#!/usr/bin/python3 -u

import sys
import os
import json
import shutil
import tempfile
#from anon_connection_wizard import repair_torrc

whonix = os.path.exists('/usr/share/anon-gw-base-files/gateway')
if whonix:
    torrc_file_path = '/usr/local/etc/torrc.d/40_anon_connection_wizard.conf'
    torrc_user_file_path =  '/usr/local/etc/torrc.d/50_user.conf'
else:
    torrc_file_path = '/etc/torrc.d/40_anon_connection_wizard.conf'
    torrc_user_file_path = '/etc/torrc.d/50_user.conf'
torrc_tmp_file_path = ''

bridges_default_path = '/usr/share/anon-connection-wizard/bridges_default'

command_useBridges = 'UseBridges 1\n'
command_use_custom_bridge = '# Custom Bridge is used:'

bridges_command = ['ClientTransportPlugin obfs2,obfs3 exec /usr/bin/obfs4proxy\n',
                   'ClientTransportPlugin obfs4 exec /usr/bin/obfs4proxy\n',
                   'ClientTransportPlugin meek_lite exec /usr/bin/obfs4proxy\n',
                   'ClientTransportPlugin meek_lite exec /usr/bin/obfs4proxy\n',
                   'ClientTransportPlugin scramblesuit exec /usr/bin/obfs4proxy\n',
                   'ClientTransportPlugin fte exec /usr/bin/fteproxy --managed']

bridges_type = ['obfs3', 'obfs4', 'meek-amazon', 'meek-azure', 'scramblesuit', 'fte']

meek_amazon_address = 'a0.awsstatic.com\n'
meek_azure_address = 'ajax.aspnetcdn.com\n'

proxy_torrc =    ['HTTPSProxy',
                'Socks4Proxy',
                'Socks5Proxy']

proxies =      ['HTTP/HTTPS',
                'SOCKS4',
                'SOCKS5']

proxy_auth =    ['HTTPSProxyAuthenticator',
                'Socks5ProxyUsername',
                'Socks5ProxyPassword']

#command_http = 'HTTPSProxy '
#command_httpAuth = 'HTTPSProxyAuthenticator'
#command_sock4 = 'Socks4Proxy '
#command_sock5 = 'Socks5Proxy '
#command_sock5Username = 'Socks5ProxyUsername'
#command_sock5Password = 'Socks5ProxyPassword'

def gen_torrc(args):
    bridge_type =       str(args[0])
    custom_bridges =    str(args[1])
    proxy_type =        str(args[2])
    if not proxy_type == 'None':
        proxy_ip =          str(args[3])
        proxy_port =        str(args[4])
        proxy_username =    str(args[5])
        proxy_password  =   str(args[6])
    #repair_torrc.repair_torrc()  # This guarantees a good set of torrc files

    # Creates a file and returns a tuple containing both the handle and the path.
    # we are responsible for removing tmp file when finished which is the reason we
    # use shutil.move(), not shutil.copy(), below
    #handle, torrc_tmp_file_path = tempfile.mkstemp()

    # Temporary. Write directly to torrc. If we create a tempfile and move it to torrc.d,
    # tor daemon cannot open it: 'permission denied'.
    with open(torrc_file_path, "w") as f:
        f.write("\
# This file is generated by and should ONLY be used by anon-connection-wizard.\n\
# User configuration should go to " + torrc_user_file_path + ", not here. Because:\n\
#    1. This file can be easily overwritten by anon-connection-wizard.\n\
#    2. Even a single character change in this file may cause error.\n\
# However, deleting this file will be fine since a new plain file will be generated \
the next time you run anon-connection-wizard.\n\
")
        f.write('DisableNetwork 0\n')

        if bridge_type in bridges_type:
            f.write(command_useBridges)
            command = bridges_command[bridges_type.index(bridge_type)]
            f.write(command)
            bridges = json.loads(open(bridges_default_path).read())
            # The bridges variable are like a multilayer-dictionary
            for bridge in bridges['bridges'][bridge_type]:
                f.write('bridge {0}\n'.format(bridge))

        elif bridge_type == 'Custom bridges':
            bridge = str(custom_bridges.split()[0]).lower()
            if bridge in bridges_type:
                f.write(command_useBridges)
                command = bridges_command[bridges_type.index(bridge)]
                f.write(command)
                bridge_custom_list = custom_bridges.split('\n')
                for bridge in bridge_custom_list:
                    f.write('bridge {0}\n'.format(bridge))
                #f.write(command_use_custom_bridge)

        if proxy_type == 'HTTP/HTTPS':
            f.write('HTTPSProxy {0}:{1}\n'.format(proxy_ip, proxy_port))
            if not proxy_username == '':
                f.write('HTTPSProxyAuthenticator {0}:{1}\n'.format(proxy_username,
                                                                   proxy_password))
        elif proxy_type == 'SOCKS4':
            # Notice that SOCKS4 does not support proxy username and password
            f.write('Socks4Proxy {0}:{1}\n'.format(proxy_ip, proxy_port))
        elif proxy_type == 'SOCKS5':
            f.write('Socks5Proxy {0}:{1}\n'.format(proxy_ip, proxy_port))
            if (proxy_username != ''):
                f.write('Socks5ProxyUsername {0}\n'.format(proxy_username))
                f.write('Socks5ProxyPassword {0}\n'.format(proxy_password))

    #shutil.move(torrc_tmp_file_path, torrc_file_path)

def parse_torrc():
    if os.path.exists(torrc_file_path):
        use_bridge = False
        use_proxy = False
        if 'Proxy' in open(torrc_file_path).read():
            use_proxy = True
        if 'UseBridges' in open(torrc_file_path).read():
            use_bridge = True

        if use_bridge:
            with open(torrc_file_path, 'r') as f:
                for line in f:
                    if line.startswith('ClientTransportPlugin'):
                        bridge_type = bridges_type[bridges_command.index(line)]
                    if line.endswith(meek_amazon_address):
                        bridge_type = 'meek-amazon'
                    if line.endswith(meek_azure_address):
                        bridge_type = 'meek-azure'
                    #if line.startswith(command_use_custom_bridge):
                        #bridge_type = 'Custom bridges'

                if bridge_type == 'obfs4':
                    bridge_type = 'obfs4 (recommended)'
                elif bridge_type == 'meek-amazon':
                    bridge_type = 'meek-amazon (works in China)'
                elif bridge_type == 'meek-azure':
                    bridge_type = 'meek-azure (works in China)'
        else:
            bridge_type = 'None'

        auth_check = False
        if use_proxy:
            with open(torrc_file_path, 'r') as f:
                for line in f:
                    proxy = line.split()[0] in proxy_torrc
                    auth_http = line.startswith(proxy_auth[0])
                    socks5_user = line.startswith(proxy_auth[1])
                    socks5_pwd = line.startswith(proxy_auth[2])

                    if proxy:
                        proxy_type = proxies[proxy_torrc.index(line.split()[0])]
                        proxy_ip = line.split()[1].split(':')[0]
                        proxy_port = line.split()[1].split(':')[1].split('\n')[0]
                        proxy = False
                    if auth_http:
                        auth_check = True
                        proxy_username = line.split()[1].split(':')[0]
                        proxy_password = line.split()[1].split(':')[1]
                        auth_http = False
                    if socks5_user:
                        auth_check = True
                        proxy_username = line.split()[1]
                        socks5_user = False
                    if socks5_pwd:
                        auth_check = True
                        proxy_password = line.split()[1]
                        socks5_pwd = False

        else:
            proxy_type = 'None'
            proxy_ip = ''
            proxy_port = ''
            proxy_username = ''
            proxy_password = ''

        if not auth_check:
            proxy_username = ''
            proxy_password = ''

        return(bridge_type, proxy_type, proxy_ip, proxy_port, proxy_username, proxy_password)
